"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[7823],{5807:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"block-development/product-editor-development/how-to-guides/generic-fields-tutorial","title":"Extending the product form with generic fields","description":"We have large list of generic fields that a plugin can use to extend the new product form. You can find the full list here. Each field contains documentation for what attributes the field supports.","source":"@site/../block-development/product-editor-development/how-to-guides/generic-fields-tutorial.md","sourceDirName":"block-development/product-editor-development/how-to-guides","slug":"/block-development/product-editor-development/how-to-guides/generic-fields-tutorial","permalink":"/docs/block-development/product-editor-development/how-to-guides/generic-fields-tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../block-development/product-editor-development/how-to-guides/generic-fields-tutorial.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Extending the product form with custom fields","permalink":"/docs/block-development/product-editor-development/how-to-guides/custom-field-tutorial"},"next":{"title":"Extensibility guidelines","permalink":"/docs/block-development/product-editor-development/product-editor-extensibility-guidelines"}}');var n=o(4848),d=o(8453);const r={},a="Extending the product form with generic fields",s={},c=[{value:"Using a generic block",id:"using-a-generic-block",level:2},{value:"Dynamically hiding or showing the generic field",id:"dynamically-hiding-or-showing-the-generic-field",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"extending-the-product-form-with-generic-fields",children:"Extending the product form with generic fields"})}),"\n",(0,n.jsxs)(t.p,{children:["We have large list of generic fields that a plugin can use to extend the new product form. You can find the full list ",(0,n.jsx)(t.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/README.md",children:"here"}),". Each field contains documentation for what attributes the field supports."]}),"\n",(0,n.jsx)(t.h2,{id:"using-a-generic-block",children:"Using a generic block"}),"\n",(0,n.jsxs)(t.p,{children:["Using a generic block is pretty easy. We have created an template API that allows you to add new fields, the API refers to them as ",(0,n.jsx)(t.code,{children:"blocks"}),". There are a couple actions that allow us to interact with these templates. There is the ",(0,n.jsx)(t.code,{children:"woocommerce_layout_template_after_instantiation"})," that is triggered when a new template is registered. There are also other actions triggered when a specific field/block is added ( see ",(0,n.jsx)(t.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/block-template-lifecycle.md#block-addition-and-removal",children:"block addition and removal"})," )."]}),"\n",(0,n.jsx)(t.p,{children:"Let's say we want to add something to the basic details section, we can do so by making use of the above mentioned hook:"}),"\n",(0,n.jsxs)(t.p,{children:["This will add a number field called ",(0,n.jsx)(t.strong,{children:"Animal age"})," to each template that has a ",(0,n.jsx)(t.code,{children:"basic-details"})," section."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"add_action(\n\t'woocommerce_layout_template_after_instantiation',\n\tfunction( $layout_template_id, $layout_template_area, $layout_template ) {\n\t    $basic_details = $layout_template->get_section_by_id( 'basic-details' );\n\n        if ( $basic_details ) {\n\t        $basic_details->add_block(\n        \t\t[\n        \t\t\t'id' \t     => 'example-tutorial-animal-age',\n                    // This orders the field, core fields are separated by sums of 10.\n\t            \t'order'\t     => 40,\n\t            \t'blockName'  => 'woocommerce/product-number-field',\n\t            \t'attributes' => [\n                        // Attributes specific for the product-number-field.\n\t            \t\t'label' => 'Animal age',\n\t            \t\t'property' => 'meta_data.animal_age',\n\t            \t\t'suffix' => 'Yrs',\n\t            \t\t'placeholder' => 'Age of animal',\n\t            \t\t'required' => true,\n\t            \t\t'min' => 1,\n\t            \t\t'max' => 20\n\t            \t],\n                ]\n            );\n        }\n\t},\n\t10,\n\t3\n);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"dynamically-hiding-or-showing-the-generic-field",children:"Dynamically hiding or showing the generic field"}),"\n",(0,n.jsxs)(t.p,{children:["It is also possible to dynamically hide or show your field if data on the product form changes.\nWe can do this by adding a ",(0,n.jsx)(t.code,{children:"hideCondition"})," ( plural ). For example if we wanted to hide our field if the product price is higher than 20, we can do so by adding this expression:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"'hideConditions' => array(\n\tarray(\n\t\t'expression' => 'editedProduct.regular_price >= 20',\n\t),\n),\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"hideConditions"})," also support targeting meta data by using dot notation. You can do so by writing an expression like this: ",(0,n.jsx)(t.code,{children:"! editedProduct.meta_data.animal_type"})," that will hide a field if the ",(0,n.jsx)(t.code,{children:"animal_type"})," meta data value doesn't exist."]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var i=o(6540);const n={},d=i.createContext(n);function r(e){const t=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(d.Provider,{value:t},e.children)}}}]);