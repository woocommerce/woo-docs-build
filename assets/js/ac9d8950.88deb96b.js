"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[6938],{7687:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"extensions/settings-and-config/working-with-woocommerce-admin-pages","title":"Integrating admin pages into WooCommerce extensions","description":"Introduction","source":"@site/../extensions/settings-and-config/working-with-woocommerce-admin-pages.md","sourceDirName":"extensions/settings-and-config","slug":"/extensions/settings-and-config/working-with-woocommerce-admin-pages","permalink":"/docs/extensions/settings-and-config/working-with-woocommerce-admin-pages","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../extensions/settings-and-config/working-with-woocommerce-admin-pages.md","tags":[],"version":"current","frontMatter":{"post_title":"Integrating admin pages into WooCommerce extensions","sidebar_label":"Integrating admin pages"},"sidebar":"extensionsSidebar","previous":{"title":"Custom attributes in menus","permalink":"/docs/extensions/settings-and-config/using-custom-attributes-in-menus"},"next":{"title":"Onboarding","permalink":"/docs/category/onboarding"}}');var t=o(4848),i=o(8453);const s={post_title:"Integrating admin pages into WooCommerce extensions",sidebar_label:"Integrating admin pages"},a="Integrating admin pages into WooCommerce extensions",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Connecting a PHP-powered page to WooCommerce Admin",id:"connecting-a-php-powered-page-to-woocommerce-admin",level:2},{value:"A note about determining the screen ID",id:"a-note-about-determining-the-screen-id",level:3},{value:"Registering a React-powered page",id:"registering-a-react-powered-page",level:2},{value:"Example: Adding a new WooCommerce Admin page",id:"example-adding-a-new-woocommerce-admin-page",level:3},{value:"Further reading",id:"further-reading",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"integrating-admin-pages-into-woocommerce-extensions",children:"Integrating admin pages into WooCommerce extensions"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["There are a number of ways to manage admin-area pages for your WooCommerce extension. You can use existing PHP pages or create new React-powered pages. Regardless of the approach you choose, you'll need to register your page with the ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/classes/Automattic-WooCommerce-Admin-PageController.html",children:(0,t.jsx)(n.code,{children:"PageController"})})," in order to display the WooCommerce Admin header and activity panel on your page."]}),"\n",(0,t.jsx)(n.h2,{id:"connecting-a-php-powered-page-to-woocommerce-admin",children:"Connecting a PHP-powered page to WooCommerce Admin"}),"\n",(0,t.jsxs)(n.p,{children:["To register an existing PHP-powered admin page with the ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/classes/Automattic-WooCommerce-Admin-PageController.html",children:(0,t.jsx)(n.code,{children:"PageController"})}),", use the ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/namespaces/default.html#function_wc_admin_connect_page",children:(0,t.jsx)(n.code,{children:"wc_admin_connect_page()"})})," function. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"wc_admin_connect_page(\n    array(\n        'id'        => 'woocommerce-settings',\n        'screen_id' => 'woocommerce_page_wc-settings-general',\n        'title'     => array( 'Settings', 'General' ),\n        'path'      => add_query_arg( 'page', 'wc-settings', 'admin.php' ),\n    )\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/namespaces/default.html#function_wc_admin_connect_page",children:(0,t.jsx)(n.code,{children:"wc_admin_connect_page()"})})," function accepts an array of arguments, two of which are optional:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This identifies the page with the controller."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"parent"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - This value denotes the page as a child of a parent (using the parent's ID) and is used for generating breadcrumbs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"screen_id"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This corresponds to ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/classes/Automattic-WooCommerce-Admin-PageController.html#method_get_current_screen_id",children:(0,t.jsx)(n.code,{children:"PageController::get_current_screen_id()"})}),". It is used to determine the current page. (see note below)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"title"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This corresponds to the page's title and is used to build breadcrumbs. You can supply a string or an array of breadcrumb pieces here."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - This is the page's relative path. Used for linking breadcrumb pieces when this page is a parent."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, you can see how to use an array to construct breadcrumbs for your extension. WooCommerce will attach a link leading to the ",(0,t.jsx)(n.code,{children:"path"})," value to the first piece in the title array. All subsequent pieces are rendered as text and not linked."]}),"\n",(0,t.jsx)(n.h3,{id:"a-note-about-determining-the-screen-id",children:"A note about determining the screen ID"}),"\n",(0,t.jsxs)(n.p,{children:["WooCommerce Admin uses its own version of ",(0,t.jsx)(n.a,{href:"https://developer.wordpress.org/reference/functions/get_current_screen/",children:(0,t.jsx)(n.code,{children:"get_current_screen()"})})," to allow for more precise identification of admin pages, which may have various tabs and subsections."]}),"\n",(0,t.jsx)(n.p,{children:"The format of this ID may vary depending on the structural elements present on the page. Some formats that the function will generate are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"{$current_screen->action}-{$current_screen->action}-tab-section"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"{$current_screen->action}-{$current_screen->action}-tab"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{$current_screen->action}-{$current_screen->action}"})," if no tab is present"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{$current_screen->action}"})," if no action or tab is present"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If your extension adds new pages with tabs or subsections, be sure to use the ",(0,t.jsx)(n.code,{children:"wc_admin_pages_with_tabs"})," and ",(0,t.jsx)(n.code,{children:"wc_admin_page_tab_sections"})," filters to have WooCommerce generate accurate screen IDs for them."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.code,{children:"wc_admin_current_screen_id"})," filter to make any changes necessary to the screen ID generation behavior."]}),"\n",(0,t.jsx)(n.h2,{id:"registering-a-react-powered-page",children:"Registering a React-powered page"}),"\n",(0,t.jsxs)(n.p,{children:["To register a React-powered page, use the ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/namespaces/default.html#function_wc_admin_register_page",children:(0,t.jsx)(n.code,{children:"wc_admin_register_page()"})})," function. It accepts an array of arguments:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This identifies the page with the controller."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"parent"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - This denotes the page as a child of ",(0,t.jsx)(n.code,{children:"parent"})," (using the parent's ID) and is used for generating breadcrumbs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"title"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This corresponds to the page's title and is used to build breadcrumbs. You can supply a String or an Array of breadcrumb pieces here."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," (",(0,t.jsx)(n.strong,{children:"required"}),") - This is the page's path (relative to ",(0,t.jsx)(n.code,{children:"#wc-admin"}),"). It is used for identifying this page and for linking breadcrumb pieces when this page is a parent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"capability"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - User capability needed to access this page. The default value is ",(0,t.jsx)(n.code,{children:"manage_options"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"icon"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - Use this to apply a Dashicons helper class or base64-encoded SVG. Include the entire dashicon class name, ie ",(0,t.jsx)(n.code,{children:"dashicons-*"}),". Note that this won't be included in WooCommerce Admin Navigation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"position"})," (",(0,t.jsx)(n.em,{children:"optional"}),") - Menu item position for parent pages. See: ",(0,t.jsx)(n.a,{href:"https://developer.wordpress.org/reference/functions/add_menu_page/",children:(0,t.jsx)(n.code,{children:"add_menu_page()"})}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Registering a React-powered page is similar to connecting a PHP page, but with some key differences. Registering pages will automatically create WordPress menu items for them, with the appropriate hierarchy based on the value of ",(0,t.jsx)(n.code,{children:"parent"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-adding-a-new-woocommerce-admin-page",children:"Example: Adding a new WooCommerce Admin page"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"if ( ! function_exists( 'YOUR_PREFIX_add_extension_register_page' ) ) {\n  function YOUR_PREFIX_add_extension_register_page() {\n    if ( ! function_exists( 'wc_admin_register_page' ) ) {\n        return;\n    }\n\n    wc_admin_register_page( array(\n        'id'       => 'my-example-page',\n        'title'    => __( 'My Example Page', 'YOUR-TEXTDOMAIN' ),\n        'parent'   => 'woocommerce',\n        'path'     => '/example',\n    ) );\n  }\n}\nadd_action( 'admin_menu', 'YOUR_PREFIX_add_extension_register_page' );\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, we encapsulated our call to ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/namespaces/default.html#function_wc_admin_register_page",children:(0,t.jsx)(n.code,{children:"wc_admin_register_page()"})})," in a function that we have hooked to the ",(0,t.jsx)(n.a,{href:"https://developer.wordpress.org/reference/hooks/admin_menu/",children:(0,t.jsx)(n.code,{children:"admin_menu"})})," action. Once you have registered a page with the controller, you can supply a React component on the client side."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\n\nconst MyExamplePage = () => <h1>My Example Extension</h1>;\n\naddFilter( 'woocommerce_admin_pages_list', 'my-namespace', ( pages ) => {\n\tpages.push( {\n\t\tcontainer: MyExamplePage,\n\t\tpath: '/example',\n\t\tbreadcrumbs: [ __( 'My Example Page', 'YOUR-TEXTDOMAIN' ) ],\n\t} );\n\n\treturn pages;\n} );\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Above, we're creating a simple ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/components-and-props.html#function-and-class-components",children:"functional React component"})," for the sake of demonstration, but a real-world extension would likely have a more complex nesting of components."]}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,t.jsxs)(n.p,{children:["You can learn more about how page registration works by checking out the ",(0,t.jsx)(n.a,{href:"https://woocommerce.github.io/code-reference/classes/Automattic-WooCommerce-Admin-PageController.html",children:(0,t.jsx)(n.code,{children:"PageController"})})," class in the WooCommerce Core Code Reference."]}),"\n",(0,t.jsx)(n.p,{children:"You can see real-world examples of the two page registration methods in WooCommerce Core by taking a look at:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/includes/react-admin/connect-existing-pages.php",children:"How WooCommerce Admin registers existing core pages"})," - registering PHP-powered pages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Internal/Admin/Analytics.php",children:"How WooCommerce registers React-powered Analytics report pages"})," - registering React-powered pages"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var r=o(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);