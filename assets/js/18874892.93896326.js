"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[6006],{8367:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"best-practices/data-management/data-storage","title":"Data storage primer","description":"When developing for WordPress and WooCommerce, it\'s important to consider the nature and permanence of your data. This will help you decide the best way to store it. Here\'s a quick primer:","source":"@site/../best-practices/data-management/data-storage.md","sourceDirName":"best-practices/data-management","slug":"/best-practices/data-management/data-storage","permalink":"/docs/best-practices/data-management/data-storage","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../best-practices/data-management/data-storage.md","tags":[],"version":"current","frontMatter":{"post_title":"Data storage primer","sidebar_label":"Data storage"},"sidebar":"docsSidebar","previous":{"title":"Using CRUD objects","permalink":"/docs/best-practices/data-management/crud-objects"},"next":{"title":"Manage data stores","permalink":"/docs/best-practices/data-management/data-stores"}}');var n=a(4848),r=a(8453);const o={post_title:"Data storage primer",sidebar_label:"Data storage"},i="Data storage primer",d={},c=[{value:"Transients",id:"transients",level:2},{value:"WP Cache",id:"wp-cache",level:2},{value:"wp_options Table",id:"wp_options-table",level:2},{value:"Post Types",id:"post-types",level:2},{value:"Taxonomies",id:"taxonomies",level:2},{value:"Logging",id:"logging",level:2}];function p(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"data-storage-primer",children:"Data storage primer"})}),"\n",(0,n.jsx)(t.p,{children:"When developing for WordPress and WooCommerce, it's important to consider the nature and permanence of your data. This will help you decide the best way to store it. Here's a quick primer:"}),"\n",(0,n.jsx)(t.h2,{id:"transients",children:"Transients"}),"\n",(0,n.jsxs)(t.p,{children:["If the data may not always be present (i.e., it expires), use a ",(0,n.jsx)(t.a,{href:"https://developer.wordpress.org/apis/handbook/transients/",children:"transient"}),". Transients are a simple and standardized way of storing cached data in the database temporarily by giving it a custom name and a timeframe after which it will expire and be deleted."]}),"\n",(0,n.jsx)(t.h2,{id:"wp-cache",children:"WP Cache"}),"\n",(0,n.jsxs)(t.p,{children:["If the data is persistent but not always present, consider using the ",(0,n.jsx)(t.a,{href:"https://developer.wordpress.org/reference/classes/wp_object_cache/",children:"WP Cache"}),". The WP Cache functions allow you to cache data that is computationally expensive to regenerate, such as complex query results."]}),"\n",(0,n.jsx)(t.h2,{id:"wp_options-table",children:"wp_options Table"}),"\n",(0,n.jsxs)(t.p,{children:["If the data is persistent and always present, consider the ",(0,n.jsx)(t.a,{href:"https://developer.wordpress.org/apis/handbook/options/",children:"wp_options table"}),". The Options API is a simple and standardized way of storing data in the wp_options table in the WordPress database."]}),"\n",(0,n.jsx)(t.h2,{id:"post-types",children:"Post Types"}),"\n",(0,n.jsxs)(t.p,{children:["If the data type is an entity with n units, consider a ",(0,n.jsx)(t.a,{href:"https://developer.wordpress.org/post_type/",children:"post type"}),'. Post types are "types" of content that are stored in the same way, but are easy to distinguish in the code and UI.']}),"\n",(0,n.jsx)(t.h2,{id:"taxonomies",children:"Taxonomies"}),"\n",(0,n.jsxs)(t.p,{children:["If the data is a means of sorting/categorizing an entity, consider a ",(0,n.jsx)(t.a,{href:"https://developer.wordpress.org/taxonomy/",children:"taxonomy"}),". Taxonomies are a way of grouping things together."]}),"\n",(0,n.jsx)(t.h2,{id:"logging",children:"Logging"}),"\n",(0,n.jsxs)(t.p,{children:["Logs should be written to a file using the ",(0,n.jsx)(t.a,{href:"https://woocommerce.com/wc-apidocs/class-WC_Logger.html",children:"WC_Logger"})," class. This is a simple and standardized way of recording events and errors for debugging purposes."]}),"\n",(0,n.jsx)(t.p,{children:"Remember, the best method of data storage depends on the nature of the data and how it will be used in your application."})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>i});var s=a(6540);const n={},r=s.createContext(n);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);