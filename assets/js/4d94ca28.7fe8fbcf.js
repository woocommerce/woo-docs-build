"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[2678],{1147:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"extensions/settings-and-config/settings-api","title":"Settings API","description":"The WooCommerce Settings API is used by extensions to display, save, and load settings. The best way to make use of the API in your extension is to create a class that extends the WCSettingsAPI class:","source":"@site/../extensions/settings-and-config/settings-api.md","sourceDirName":"extensions/settings-and-config","slug":"/extensions/settings-and-config/settings-api","permalink":"/docs/extensions/settings-and-config/settings-api","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../extensions/settings-and-config/settings-api.md","tags":[],"version":"current","frontMatter":{"post_title":"Settings API"},"sidebar":"extensionsSidebar","previous":{"title":"Add store management links","permalink":"/docs/extensions/settings-and-config/how-to-add-your-own-store-management-links"},"next":{"title":"Custom attributes in menus","permalink":"/docs/extensions/settings-and-config/using-custom-attributes-in-menus"}}');var i=n(4848),o=n(8453);const a={post_title:"Settings API"},r="Settings API",d={},c=[{value:"Defining form fields",id:"defining-form-fields",level:2},{value:"Displaying your settings",id:"displaying-your-settings",level:2},{value:"Saving your settings",id:"saving-your-settings",level:2},{value:"Loading your settings",id:"loading-your-settings",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"settings-api",children:"Settings API"})}),"\n",(0,i.jsxs)(t.p,{children:["The WooCommerce Settings API is used by extensions to display, save, and load settings. The best way to make use of the API in your extension is to create a class that extends the ",(0,i.jsx)(t.code,{children:"WC_Settings_API"})," class:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"class My_Extension_Settings extends WC_Settings_API {\n\t//\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"defining-form-fields",children:"Defining form fields"}),"\n",(0,i.jsxs)(t.p,{children:["You can define your fields using a method called ",(0,i.jsx)(t.code,{children:"init_form_fields"})," in your class constructor:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"$this->init_form_fields();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You must have your settings defined before you can load them. Setting definitions go in the ",(0,i.jsx)(t.code,{children:"form_fields"})," array:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"/**\n * Initialise gateway settings form fields.\n */\nfunction init_form_fields() {\n\t$this->form_fields = array(\n\t\t'title'       => array(\n\t\t\t'title'       => __( 'Title', 'your-text-domain' ),\n\t\t\t'type'        => 'text',\n\t\t\t'description' => __( 'This controls the title which the user sees during checkout.', 'your-text-domain' ),\n\t\t\t'default'     => __( 'PayPal', 'your-text-domain' )\n\t\t),\n\t\t'description' => array(\n\t\t\t'title'       => __( 'Description', 'your-text-domain' ),\n\t\t\t'type'        => 'textarea',\n\t\t\t'description' => __( 'This controls the description which the user sees during checkout.', 'your-text-domain' ),\n\t\t\t'default'     => __( \"Pay via PayPal; you can pay with your credit card if you don't have a PayPal account\", 'your-text-domain' )\n\t\t)\n\t);\n} // End init_form_fields()\n"})}),"\n",(0,i.jsxs)(t.p,{children:["(Make sure your class initializes the ",(0,i.jsx)(t.code,{children:"form_fields"}),' property so that the "Creation of dynamic property" error is not thrown in PHP 8.2+)']}),"\n",(0,i.jsx)(t.p,{children:"In the above example we define two settings, Title and Description. Title is a text box, whereas Description is a textarea. Notice how you can define a default value and a description for the setting itself."}),"\n",(0,i.jsx)(t.p,{children:"Setting definitions use the following format:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"'setting_name' => array(\n\t'title'       => 'Title for your setting shown on the settings page',\n\t'description' => 'Description for your setting shown on the settings page',\n\t'type'        => 'text|password|textarea|checkbox|select|multiselect',\n\t'default'     => 'Default value for the setting',\n\t'class'       => 'Class for the input element',\n\t'css'         => 'CSS rules added inline on the input element',\n\t'label'       => 'Label', // For checkbox inputs only.\n\t'options'     => array( // Array of options for select/multiselect inputs only.\n\t\t'key' => 'value'\n\t),\n)\n"})}),"\n",(0,i.jsx)(t.h2,{id:"displaying-your-settings",children:"Displaying your settings"}),"\n",(0,i.jsxs)(t.p,{children:["Create a method called ",(0,i.jsx)(t.code,{children:"admin_options"})," containing the following:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"function admin_options() {\n\t?>\n\t<h2><?php esc_html_e( 'Your plugin name', 'your-text-domain' ); ?></h2>\n\t<table class=\"form-table\">\n\t\t<?php $this->generate_settings_html(); ?>\n\t</table>\n\t<?php\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This will output your settings in the correct format."}),"\n",(0,i.jsx)(t.h2,{id:"saving-your-settings",children:"Saving your settings"}),"\n",(0,i.jsxs)(t.p,{children:["To have your settings save, add your class's ",(0,i.jsx)(t.code,{children:"process_admin_options"})," method to the appropriate ",(0,i.jsx)(t.code,{children:"_update_options_"})," hook. For example, payment gateways should use the payment gateway hook:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"add_action( 'woocommerce_update_options_payment_gateways', array( $this, 'process_admin_options' ) );\n"})}),"\n",(0,i.jsx)(t.p,{children:"Other types of plugins have similar hooks:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"add_action( 'woocommerce_update_options_shipping_methods', array( $this, 'process_admin_options' ) );\n"})}),"\n",(0,i.jsx)(t.h2,{id:"loading-your-settings",children:"Loading your settings"}),"\n",(0,i.jsx)(t.p,{children:"In the constructor you can load the settings you previously defined:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"// Load the settings.\n$this->init_settings();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["After that you can load your settings from the settings API. The ",(0,i.jsx)(t.code,{children:"init_settings"})," method above populates the settings variable for you:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"// Define user set variables\n$this->title       = $this->settings['title'];\n$this->description = $this->settings['description'];\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);