"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[5877],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var o=i(6540);const s={},r=o.createContext(s);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:n},e.children)}},8833:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"code-snippets/customising-checkout-fields","title":"Customizing checkout fields using actions and filters","description":"If you are unfamiliar with code and resolving potential conflicts, we have an extension that can help: WooCommerce Checkout Field Editor. Installing and activating this extension overrides any code below that you try to implement; and you cannot have custom checkout field code in your functions.php file when the extension is activated.","source":"@site/../code-snippets/customising-checkout-fields.md","sourceDirName":"code-snippets","slug":"/code-snippets/customising-checkout-fields","permalink":"/docs/code-snippets/customising-checkout-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../code-snippets/customising-checkout-fields.md","tags":[],"version":"current","frontMatter":{"post_title":"Customizing checkout fields using actions and filters"},"sidebar":"docsSidebar","previous":{"title":"Configuring special tax scenarios","permalink":"/docs/code-snippets/configuring_special_tax_scenarios"},"next":{"title":"Disabling marketplace suggestions","permalink":"/docs/code-snippets/disabling_marketplace_suggestions_programmatically"}}');var s=i(4848),r=i(8453);const t={post_title:"Customizing checkout fields using actions and filters"},c="Customizing checkout fields using actions and filters",d={},l=[{value:"Note",id:"note",level:2},{value:"How Are Checkout Fields Loaded to WooCommerce?",id:"how-are-checkout-fields-loaded-to-woocommerce",level:2},{value:"Overriding Core Fields",id:"overriding-core-fields",level:2},{value:"Defining select options",id:"defining-select-options",level:3},{value:"Priority",id:"priority",level:2},{value:"Examples",id:"examples",level:2},{value:"Change Return to Shop button redirect URL",id:"change-return-to-shop-button-redirect-url",level:3},{value:"Adding Custom Shipping And Billing Fields",id:"adding-custom-shipping-and-billing-fields",level:3},{value:"Adding a Custom Special Field",id:"adding-a-custom-special-field",level:3},{value:"Make phone number not required",id:"make-phone-number-not-required",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"customizing-checkout-fields-using-actions-and-filters",children:"Customizing checkout fields using actions and filters"})}),"\n",(0,s.jsxs)(n.p,{children:["If you are unfamiliar with code and resolving potential conflicts, we have an extension that can help: ",(0,s.jsx)(n.a,{href:"https://woocommerce.com/products/woocommerce-checkout-field-editor/",children:"WooCommerce Checkout Field Editor"}),". Installing and activating this extension overrides any code below that you try to implement; and you cannot have custom checkout field code in your functions.php file when the extension is activated."]}),"\n",(0,s.jsxs)(n.p,{children:["Custom code should be copied into your child theme's ",(0,s.jsx)(n.strong,{children:"functions.php"})," file."]}),"\n",(0,s.jsx)(n.h2,{id:"note",children:"Note"}),"\n",(0,s.jsxs)(n.p,{children:["Some parts of this document only applies to the shortcode Checkout, for adding fields to the Checkout block, consult ",(0,s.jsx)(n.a,{href:"/docs/block-development/cart-and-checkout-blocks/additional-checkout-fields",children:"the additional checkout fields documentation"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"how-are-checkout-fields-loaded-to-woocommerce",children:"How Are Checkout Fields Loaded to WooCommerce?"}),"\n",(0,s.jsxs)(n.p,{children:["The billing and shipping fields for checkout pull from the countries class ",(0,s.jsx)(n.code,{children:"class-wc-countries.php"})," and the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"get_address_fields"})})," function. This allows WooCommerce to enable/disable fields based on the user's location."]}),"\n",(0,s.jsxs)(n.p,{children:["Before returning these fields, WooCommerce puts the fields through a ",(0,s.jsx)(n.em,{children:"filter"}),". This allows them to be edited by third-party plugins, themes and your own custom code."]}),"\n",(0,s.jsx)(n.p,{children:"Billing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$address_fields = apply_filters( 'woocommerce_billing_fields', $address_fields );\n"})}),"\n",(0,s.jsx)(n.p,{children:"Shipping:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$address_fields = apply_filters( 'woocommerce_shipping_fields', $address_fields );\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The checkout class adds the loaded fields to its ",(0,s.jsx)(n.code,{children:"checkout_fields"}),' array, as well as adding a few other fields like "order notes".']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$this->checkout_fields['billing']  = $woocommerce->countries->get_address_fields( $this->get_value( 'billing_country' ), 'billing_' );\n$this->checkout_fields['shipping'] = $woocommerce->countries->get_address_fields( $this->get_value( 'shipping_country' ), 'shipping_' );\n$this->checkout_fields['account']  = array(\n    'account_username'   => array(\n        'type'        => 'text',\n        'label'       => __( 'Account username', 'woocommerce' ),\n        'placeholder' => _x( 'Username', 'placeholder', 'woocommerce' ),\n    ),\n    'account_password'   => array(\n        'type'        => 'password',\n        'label'       => __( 'Account password', 'woocommerce' ),\n        'placeholder' => _x( 'Password', 'placeholder', 'woocommerce' ),\n        'class'       => array( 'form-row-first' )\n    ),\n    'account_password-2' => array(\n        'type'        => 'password',\n        'label'       => __( 'Account password', 'woocommerce' ),\n        'placeholder' => _x( 'Password', 'placeholder', 'woocommerce' ),\n        'class'       => array( 'form-row-last' ),\n        'label_class' => array( 'hidden' )\n    ),\n);\n$this->checkout_fields['order']   = array(\n    'order_comments' => array(\n        'type'        => 'textarea',\n        'class'       => array( 'notes' ),\n        'label'       => __( 'Order Notes', 'woocommerce' ),\n        'placeholder' => _x( 'Notes about your order, e.g. special notes for delivery.', 'placeholder', 'woocommerce' )\n    )\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This array is also passed through a filter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$this->checkout_fields = apply_filters( 'woocommerce_checkout_fields', $this->checkout_fields );\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That means you have ",(0,s.jsx)(n.strong,{children:"full control"})," over checkout fields - you only need to know how to access them."]}),"\n",(0,s.jsx)(n.h2,{id:"overriding-core-fields",children:"Overriding Core Fields"}),"\n",(0,s.jsxs)(n.p,{children:["Hooking into the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"woocommerce_checkout_fields"})})," filter lets you override any field. As an example, let's change the placeholder on the order_comments fields. Currently, it's set to:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"_x( 'Notes about your order, e.g. special notes for delivery.', 'placeholder', 'woocommerce' );\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can change this by adding a function to our theme functions.php file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    $fields['order']['order_comments']['placeholder'] = 'My new placeholder';\n    return $fields;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can override other parts, such as labels:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    $fields['order']['order_comments']['placeholder'] = 'My new placeholder';\n    $fields['order']['order_comments']['label']       = 'My new label';\n    return $fields;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or remove fields:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    unset( $fields['order']['order_comments'] );\n\n    return $fields;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here's a full list of fields in the array passed to ",(0,s.jsx)(n.code,{children:"woocommerce_checkout_fields"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Billing","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_first_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_last_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_company"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_address_1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_address_2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_city"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_postcode"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_country"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_state"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_email"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"billing_phone"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Shipping","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_first_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_last_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_company"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_address_1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_address_2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_city"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_postcode"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_country"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shipping_state"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Account","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"account_username"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"account_password"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"account_password-2"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Order","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"order_comments"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each field contains an array of properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"})," - type of field (text, textarea, password, select)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label"})," - label for the input field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"placeholder"})," - placeholder for the input"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"class"})," - class for the input"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"required"})," - true or false, whether or not the field is require"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clear"})," - true or false, applies a clear fix to the field/label"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label_class"})," - class for the label element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options"})," - for select boxes, array of options (key => value pairs)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In specific cases you need to use the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"woocommerce_default_address_fields"})})," filter. This filter is applied to all billing and shipping default fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"country"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"first_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"last_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"company"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"address_1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"address_2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"city"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"state"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"postcode"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to make the ",(0,s.jsx)(n.code,{children:"address_1"})," field optional:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Hook in\nadd_filter( 'woocommerce_default_address_fields' , 'custom_override_default_address_fields' );\n\n// Our hooked in function - $address_fields is passed via the filter!\nfunction custom_override_default_address_fields( $address_fields ) {\n    $address_fields['address_1']['required'] = false;\n\n    return $address_fields;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-select-options",children:"Defining select options"}),"\n",(0,s.jsx)(n.p,{children:"If you are adding a field with type 'select', as stated above you would define key/value pairs. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$fields['billing']['your_field']['options'] = array(\n    'option_1' => 'Option 1 text',\n    'option_2' => 'Option 2 text'\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"priority",children:"Priority"}),"\n",(0,s.jsx)(n.p,{children:"Priority in regards to PHP code helps establish when a bit of code - called a function - runs in relation to a page load. It is set inside of each function and is useful when overriding existing code for custom display."}),"\n",(0,s.jsx)(n.p,{children:"Code with a higher number set as the priority will run after code with a lower number, meaning code with a priority of 20 will run after code with 10 priority."}),"\n",(0,s.jsxs)(n.p,{children:["The priority argument is set during the ",(0,s.jsx)(n.a,{href:"https://developer.wordpress.org/reference/functions/add_action/",children:"add_action"})," function, after you establish which hook you're connecting to and what the name of your custom function will be."]}),"\n",(0,s.jsx)(n.p,{children:"In the example below, blue text is the name of the hook we're modifying, green text is the name of our custom function, and red is the priority we set."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://developer.woocommerce.com/wp-content/uploads/2023/12/priority-markup.png",alt:"Setting priority for the hooked function"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"change-return-to-shop-button-redirect-url",children:"Change Return to Shop button redirect URL"}),"\n",(0,s.jsxs)(n.p,{children:['In this example, the code is set to redirect the "Return to Shop" button found in the cart to a category that lists products for sale at ',(0,s.jsx)(n.code,{children:"http://example.url/category/specials/"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Changes the redirect URL for the Return To Shop button in the cart.\n */\nfunction wc_empty_cart_redirect_url() {\n    return 'http://example.url/category/specials/';\n}\n\nadd_filter( 'woocommerce_return_to_shop_redirect', 'wc_empty_cart_redirect_url', 10 );\n"})}),"\n",(0,s.jsx)(n.p,{children:"There, we can see the priority is set to 10. This is the typical default for WooCommerce functions and scripts, so that may not be sufficient to override that button's functionality."}),"\n",(0,s.jsx)(n.p,{children:"Instead, we can change the priority to any number greater than 10. While 11 would work, best practice dictates we use increments of ten, so 20, 30, and so on."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Changes the redirect URL for the Return To Shop button in the cart.\n */\nfunction wc_empty_cart_redirect_url() {\n    return 'http://example.com/category/specials/';\n}\n\nadd_filter( 'woocommerce_return_to_shop_redirect', 'wc_empty_cart_redirect_url', 20 );\n"})}),"\n",(0,s.jsx)(n.p,{children:"With priority, we can have two functions that are acting on the same hook. Normally this would cause a variety of problems, but since we've established one has a higher priority than the other, our site will only load the appropriate function, and we will be taken to the Specials page as intended with the code below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Changes the redirect URL for the Return To Shop button in the cart.\n * BECAUSE THIS FUNCTION HAS THE PRIORITY OF 20, IT WILL RUN AFTER THE FUNCTION BELOW (HIGHER NUMBERS RUN LATER)\n */\nfunction wc_empty_cart_redirect_url() {\n    return 'http://example.com/category/specials/';\n}\n\nadd_filter( 'woocommerce_return_to_shop_redirect', 'wc_empty_cart_redirect_url', 20 );\n\n/**\n * Changes the redirect URL for the Return To Shop button in the cart.\n * EVEN THOUGH THIS FUNCTION WOULD NORMALLY RUN LATER BECAUSE IT'S CODED AFTERWARDS, THE 10 PRIORITY IS LOWER THAN 20 ABOVE\n */\nfunction wc_empty_cart_redirect_url() {\n    return 'http://example.com/shop/';\n}\n\nadd_filter( 'woocommerce_return_to_shop_redirect', 'wc_empty_cart_redirect_url', 10 );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"adding-custom-shipping-and-billing-fields",children:"Adding Custom Shipping And Billing Fields"}),"\n",(0,s.jsxs)(n.p,{children:["Adding fields is done in a similar way to overriding fields. For example, let's add a new field to shipping fields - ",(0,s.jsx)(n.code,{children:"shipping_phone"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n     $fields['shipping']['shipping_phone'] = array(\n        'label'       => __( 'Phone', 'woocommerce' ),\n        'placeholder' => _x( 'Phone', 'placeholder', 'woocommerce' ),\n        'required'    => false,\n        'class'       => array( 'form-row-wide' ),\n        'clear'       => true\n     );\n\n     return $fields;\n}\n\n/**\n * Display field value on the order edit page\n */\nadd_action( 'woocommerce_admin_order_data_after_shipping_address', 'my_custom_checkout_field_display_admin_order_meta', 10, 1 );\n\nfunction my_custom_checkout_field_display_admin_order_meta($order){\n    echo '<p><strong>'. esc_html__( 'Phone From Checkout Form' ) . ':</strong> ' . esc_html( $order->get_meta( '_shipping_phone', true ) ) . '</p>';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://developer.woocommerce.com/wp-content/uploads/2023/12/Webp-to-PNG-Shipping-Field-Hook.png",alt:"adding custom sthipping and billing fields"})}),"\n",(0,s.jsx)(n.p,{children:"It's alive!"}),"\n",(0,s.jsxs)(n.p,{children:["What do we do with the new field? Nothing. Because we defined the field in the ",(0,s.jsx)(n.code,{children:"checkout_fields"})," array, the field is automatically processed and saved to the order post meta (in this case, _shipping_phone). If you want to add validation rules, see the checkout class where there are additional hooks you can use."]}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-custom-special-field",children:"Adding a Custom Special Field"}),"\n",(0,s.jsx)(n.p,{children:"To add a custom field is similar. Let's add a new field to checkout, after the order notes, by hooking into the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Add the field to the checkout\n */\nadd_action( 'woocommerce_after_order_notes', 'my_custom_checkout_field' );\n\nfunction my_custom_checkout_field( $checkout ) {\n\n    echo '<div id=\"my_custom_checkout_field\"><h2>' . esc_html__( 'My Field' ) . '</h2>';\n\n    woocommerce_form_field(\n        'my_field_name',\n        array(\n            'type'        => 'text',\n            'class'       => array( 'my-field-class form-row-wide' ),\n            'label'       => __( 'Fill in this field' ),\n            'placeholder' => __( 'Enter something' ),\n        ),\n        $checkout->get_value( 'my_field_name' )\n    );\n\n    echo '</div>';\n\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This gives us:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://developer.woocommerce.com/wp-content/uploads/2023/12/WooCommerce-Codex-Checkout-Field-Hook.png",alt:"WooCommerce Codex - Checkout Field Hook"})}),"\n",(0,s.jsx)(n.p,{children:"Next we need to validate the field when the checkout form is posted. For this example let's check that the field contains only letters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Process the checkout\n */\nadd_action( 'woocommerce_checkout_process', 'my_custom_checkout_field_process' );\n\nfunction my_custom_checkout_field_process() {\n    // Check if this field contains just letters.\n    if ( ! preg_match( '/^[a-zA-Z]+$/', $_POST['my_field_name'] ) ) {\n\t\twc_add_notice( esc_html__( 'Please enter only letters into this new shiny field.' ), 'error' );\n\t}\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"A checkout error is displayed if the field is blank:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://developer.woocommerce.com/wp-content/uploads/2023/12/WooCommerce-Codex-Checkout-Field-Notice.png",alt:"WooCommerce Codex - Checkout Field Notice"})}),"\n",(0,s.jsx)(n.p,{children:"Finally, let's save the new field to order custom fields using the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Update the order meta with field value\n */\nadd_action( 'woocommerce_checkout_update_order_meta', 'my_custom_checkout_field_update_order_meta' );\n\nfunction my_custom_checkout_field_update_order_meta( $order_id ) {\n    if ( ! empty( $_POST['my_field_name'] ) ) {\n        $order = wc_get_order( $order_id );\n        $order->update_meta_data( 'My Field', sanitize_text_field( $_POST['my_field_name'] ) );\n        $order->save_meta_data();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The field is now saved to the order."}),"\n",(0,s.jsx)(n.p,{children:"If you wish to display the custom field value on the admin order edition page, you can add this code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Display field value on the order edit page\n */\nadd_action( 'woocommerce_admin_order_data_after_billing_address', 'my_custom_checkout_field_display_admin_order_meta', 10, 1 );\n\nfunction my_custom_checkout_field_display_admin_order_meta( $order ){\n    echo '<p><strong>' . esc_html__( 'My Field' ) . ':</strong> ' . esc_html( $order->get_meta( 'My Field', true ) ) . '</p>';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is the result:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://developer.woocommerce.com/wp-content/uploads/2023/12/checkout_field_custom_field_admin.png",alt:"checkout_field_custom_field_admin"})}),"\n",(0,s.jsx)(n.h3,{id:"make-phone-number-not-required",children:"Make phone number not required"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"add_filter( 'woocommerce_billing_fields', 'wc_npr_filter_phone', 10, 1 );\n\nfunction wc_npr_filter_phone( $address_fields ) {\n\t$address_fields['billing_phone']['required'] = false;\n\treturn $address_fields;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);