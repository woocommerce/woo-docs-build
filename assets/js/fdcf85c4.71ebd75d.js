"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[3366],{2594:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"block-development/cart-and-checkout-blocks/faq","title":"Frequently Asked Questions","description":"This document aims to answer some of the frequently asked questions we see from developers extending WooCommerce Blocks.","source":"@site/../block-development/cart-and-checkout-blocks/faq.md","sourceDirName":"block-development/cart-and-checkout-blocks","slug":"/block-development/cart-and-checkout-blocks/faq","permalink":"/docs/block-development/cart-and-checkout-blocks/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/docusaurus-docs-prep/docs/docs/../block-development/cart-and-checkout-blocks/faq.md","tags":[],"version":"current","frontMatter":{"post_title":"Frequently asked questions","sidebar_label":"Frequently asked questions"},"sidebar":"docsSidebar","previous":{"title":"Cart and Checkout extensibility","permalink":"/docs/block-development/cart-and-checkout-blocks/extensibility-getting-started"},"next":{"title":"Processing an order","permalink":"/docs/block-development/cart-and-checkout-blocks/how-checkout-processes-an-order"}}');var c=t(4848),s=t(8453);const r={post_title:"Frequently asked questions",sidebar_label:"Frequently asked questions"},i="Frequently Asked Questions",a={},d=[{value:"General questions",id:"general-questions",level:2},{value:"How do I react to changes to the Cart or Checkout e.g. shipping method selection, or address changes?",id:"how-do-i-react-to-changes-to-the-cart-or-checkout-eg-shipping-method-selection-or-address-changes",level:3},{value:"If your code is running in a React component",id:"if-your-code-is-running-in-a-react-component",level:4},{value:"If your code is running in a non-React context",id:"if-your-code-is-running-in-a-non-react-context",level:4},{value:"Cart modifications",id:"cart-modifications",level:2},{value:"How do I dynamically make changes to the cart from the client?",id:"how-do-i-dynamically-make-changes-to-the-cart-from-the-client",level:3},{value:"How do I add fees to the cart when a specific payment method is chosen?",id:"how-do-i-add-fees-to-the-cart-when-a-specific-payment-method-is-chosen",level:3},{value:"How to force-refresh the cart from the server",id:"how-to-force-refresh-the-cart-from-the-server",level:3},{value:"How do I render something in each cart item?",id:"how-do-i-render-something-in-each-cart-item",level:3},{value:"Checkout modifications",id:"checkout-modifications",level:2},{value:"How do I remove checkout fields?",id:"how-do-i-remove-checkout-fields",level:3},{value:"How do I modify the order or customer data during checkout?",id:"how-do-i-modify-the-order-or-customer-data-during-checkout",level:3},{value:"How do I render something in the Checkout block?",id:"how-do-i-render-something-in-the-checkout-block",level:3},{value:"Rendering a field",id:"rendering-a-field",level:4},{value:"Rendering a custom block",id:"rendering-a-custom-block",level:4}];function h(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(o.header,{children:(0,c.jsx)(o.h1,{id:"frequently-asked-questions",children:"Frequently Asked Questions"})}),"\n",(0,c.jsx)(o.p,{children:"This document aims to answer some of the frequently asked questions we see from developers extending WooCommerce Blocks."}),"\n",(0,c.jsx)(o.p,{children:"We will add to the FAQ document as we receive questions, this isn't the document's final form."}),"\n",(0,c.jsxs)(o.p,{children:["If you have questions that aren't addressed here, we invite you to ask them on ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/discussions",children:"GitHub Discussions"})," or in the ",(0,c.jsx)(o.a,{href:"https://woocommerce.com/community-slack/",children:"WooCommerce Community Slack"})]}),"\n",(0,c.jsx)(o.h2,{id:"general-questions",children:"General questions"}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-react-to-changes-to-the-cart-or-checkout-eg-shipping-method-selection-or-address-changes",children:"How do I react to changes to the Cart or Checkout e.g. shipping method selection, or address changes?"}),"\n",(0,c.jsxs)(o.p,{children:["The Cart and Checkout blocks read all their data from ",(0,c.jsxs)(o.a,{href:"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data/",children:[(0,c.jsx)(o.code,{children:"@wordpress/data"})," data stores"]}),". We also have ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/tree/trunk/plugins/woocommerce-blocks/docs/third-party-developers/extensibility/data-store",children:"documentation for the data stores WooCommerce Blocks uses"}),"."]}),"\n",(0,c.jsx)(o.p,{children:"It is common for developers to want to react to changes in the cart or checkout. For example, if a user changes their shipping method, or changes a line of their address."}),"\n",(0,c.jsx)(o.p,{children:"There are two ways to do this, depending on how your code is running."}),"\n",(0,c.jsx)(o.h4,{id:"if-your-code-is-running-in-a-react-component",children:"If your code is running in a React component"}),"\n",(0,c.jsxs)(o.p,{children:["If your component is an inner block of the Cart/Checkout, or rendered in a ",(0,c.jsx)(o.a,{href:"/docs/block-development/cart-and-checkout-blocks/slot-fills",children:"Slot/Fill"}),", you can directly select the data you need from the relevant data store and perform any necessary actions when the data changes. For more information on available selectors, refer to the ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/tree/trunk/plugins/woocommerce-blocks/docs/third-party-developers/extensibility/data-store",children:"documentation for the relevant data store"}),"."]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-js",children:"/**\n * External dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { cartStore } from '@woocommerce/block-data';\nimport { useEffect } from '@wordpress/element';\n\nexport const MyComponent = () => {\n\tconst { shippingAddress } = useSelect(\n\t\t( select ) => select( cartStore ).getCartData(),\n\t\t[]\n\t);\n\tuseEffect( () => {\n\t\t// Do something when shippingAddress changes\n\t}, [ shippingAddress ] );\n};\n"})}),"\n",(0,c.jsx)(o.h4,{id:"if-your-code-is-running-in-a-non-react-context",children:"If your code is running in a non-React context"}),"\n",(0,c.jsxs)(o.p,{children:["This would be true if you're not rendering a block, or running any React code. This means you won't have access to React hooks or custom hooks like ",(0,c.jsx)(o.code,{children:"useSelect"}),". In this case you'd need to use the non-hook alternative to ",(0,c.jsx)(o.code,{children:"useSelect"})," which is ",(0,c.jsx)(o.code,{children:"select"}),". Given the requirement to react to changes, simply calling ",(0,c.jsx)(o.code,{children:"select"})," will not be enough as this will only run once. You'll need to use the ",(0,c.jsx)(o.code,{children:"subscribe"})," method to subscribe to changes to the data you're interested in."]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-ts",children:"/**\n * External dependencies\n */\nimport { select, subscribe } from '@wordpress/data';\nimport { cartStore } from '@woocommerce/block-data';\n\nlet previousCountry = '';\nconst unsubscribe = subscribe( () => {\n  const { shippingAddress } = select( cartStore ).getCartData();\n  if ( shippingAddress.country !== previousCountry ) {\n    previousCountry = shippingAddress.country;\n    // Do something when shipping country changes.\n  }\n  if ( /* some other condition that makes this subscription no longer needed */ ) {\n    unsubscribe();\n  }\n}, cartStore );\n"})}),"\n",(0,c.jsxs)(o.p,{children:["Since the ",(0,c.jsx)(o.code,{children:"subscribe"})," callback would run every time the data store receives an action, you'll need to use caching to avoid doing work when it isn't required. For example, if you only want to do work when the country changes, you would need to cache the previous value and compare it to the current value before running the task."]}),"\n",(0,c.jsxs)(o.p,{children:["If you no longer need to react to changes, you can unsubscribe from the data store using the ",(0,c.jsx)(o.code,{children:"unsubscribe"})," method which is returned by the ",(0,c.jsx)(o.code,{children:"subscribe"})," method, like in the example above."]}),"\n",(0,c.jsx)(o.h2,{id:"cart-modifications",children:"Cart modifications"}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-dynamically-make-changes-to-the-cart-from-the-client",children:"How do I dynamically make changes to the cart from the client?"}),"\n",(0,c.jsxs)(o.p,{children:["To perform actions on the server based on a client-side action, you'll need to use ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md",children:(0,c.jsx)(o.code,{children:"extensionCartUpdate"})})]}),"\n",(0,c.jsxs)(o.p,{children:['As an example, to add a "Get 10% off if you sign up to the mailing list" checkbox on your site you can use ',(0,c.jsx)(o.code,{children:"extensionCartUpdate"})," to automatically apply a 10% coupon to the cart."]}),"\n",(0,c.jsx)(o.p,{children:(0,c.jsx)(o.img,{src:"https://github.com/user-attachments/assets/e0d114b1-4e4c-4b34-9675-5571136b36d0",alt:"Image"})}),"\n",(0,c.jsx)(o.p,{children:"Assuming you've already added the checkbox, either through the Additional Checkout Fields API, or by creating an inner block, the next step will be to register the server-side code to apply the coupon if the box is checked, and remove it if it's not."}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-php",children:"add_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_update_callback(\n    [\n      'namespace' => 'extension-unique-namespace',\n      'callback'  => function( $data ) {\n        if ( isset( $data['checked'] ) && filter_var( $data['checked'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n          WC()->cart->apply_coupon( 'mailing-list-10-percent-coupon' );\n        } else {\n          WC()->cart->remove_coupon( 'mailing-list-10-percent-coupon' );\n        }\n      }\n    ]\n  );\n} );\n"})}),"\n",(0,c.jsx)(o.p,{children:"The code in the checkbox's event listener on the front end would look like this:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-js",children:"const { extensionCartUpdate } = window.wc.blocksCheckout;\n\nconst onChange = ( checked ) => {\n    extensionCartUpdate(\n        {\n            namespace: 'extension-unique-namespace',\n            data: {\n                checked\n            }  \n        } \n    )\n}\n"})}),"\n",(0,c.jsxs)(o.p,{children:["To change how this coupon is displayed in the list of coupons in the order summary, you can use the ",(0,c.jsx)(o.code,{children:"coupons"})," checkout filter, like so:"]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-js",children:"const { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCoupons = ( coupons, extensions, args ) => {\n\treturn coupons.map( ( coupon ) => {\n\t\tif ( ! coupon.label === 'mailing-list-10-percent-coupon' ) {\n\t\t\treturn coupon;\n\t\t}\n\n\t\treturn {\n\t\t\t...coupon,\n\t\t\tlabel: 'Mailing list discount',\n\t\t};\n\t} );\n};\n\nregisterCheckoutFilters( 'extension-unique-namespace', {\n\tcoupons: modifyCoupons,\n} );\n"})}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-add-fees-to-the-cart-when-a-specific-payment-method-is-chosen",children:"How do I add fees to the cart when a specific payment method is chosen?"}),"\n",(0,c.jsxs)(o.p,{children:["You need to add the fees on the server based on the selected payment method, this can be achieved using the ",(0,c.jsx)(o.code,{children:"woocommerce_cart_calculate_fees"})," action."]}),"\n",(0,c.jsx)(o.p,{children:"This is the server-side code required to add the fee:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-php",children:"add_action(\n\t'woocommerce_cart_calculate_fees',\n\tfunction () {\n\t\tif ( is_admin() && ! defined( 'DOING_AJAX' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$chosen_payment_method_id = WC()->session->get( 'chosen_payment_method' );\n\t\t$cart                     = WC()->cart;\n\n\t\tif ( 'your-payment-method-slug' === $chosen_payment_method_id ) {\n\t\t\t$percentage = 0.05;\n\t\t\t$surcharge  = ( $cart->cart_contents_total + $cart->shipping_total ) * $percentage;\n\t\t\t$cart->add_fee( 'Payment method fee', $surcharge );\n\t\t}\n\t}\n);\n"})}),"\n",(0,c.jsx)(o.h3,{id:"how-to-force-refresh-the-cart-from-the-server",children:"How to force-refresh the cart from the server"}),"\n",(0,c.jsxs)(o.p,{children:["This can be achieved using ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md",children:(0,c.jsx)(o.code,{children:"extensionCartUpdate"})})," which is the preferred way, but it is also possible by executing the ",(0,c.jsx)(o.code,{children:"receiveCart"})," action on the ",(0,c.jsx)(o.code,{children:"wc/store/cart"})," data store with a valid cart object, like so:"]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-js",children:"const { dispatch } = window.wp.data;\n\ndispatch( 'wc/store/cart' ).receiveCart( cartObject )\n"})}),"\n",(0,c.jsx)(o.p,{children:"All the cart routes on Store API return a cart object which can be used here. Passing an invalid cart object here will cause errors in the block."}),"\n",(0,c.jsx)(o.p,{children:"You can also use:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-js",children:"const { dispatch } = window.wp.data;\n\ndispatch('wc/store/cart').invalidateResolutionForStore()\n"})}),"\n",(0,c.jsx)(o.p,{children:"However, this will cause a brief flash of an empty cart while the new cart is fetched."}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-render-something-in-each-cart-item",children:"How do I render something in each cart item?"}),"\n",(0,c.jsxs)(o.p,{children:["This is currently ",(0,c.jsx)(o.strong,{children:"not"})," officially supported, however we have heard of developers doing this using DOM manipulation and React portals. If you choose to take this route, please note that your integrations may stop working if we make changes to the Cart block in the future."]}),"\n",(0,c.jsx)(o.h2,{id:"checkout-modifications",children:"Checkout modifications"}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-remove-checkout-fields",children:"How do I remove checkout fields?"}),"\n",(0,c.jsxs)(o.p,{children:["We don't encourage this due to the wide array of plugins WordPress and Woo support. Some of these may rely on certain checkout fields to function, but if you're certain the fields are safe to remove, please see ",(0,c.jsx)(o.a,{href:"/docs/block-development/cart-and-checkout-blocks/removing-checkout-fields",children:"Removing Checkout Fields"}),"."]}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-modify-the-order-or-customer-data-during-checkout",children:"How do I modify the order or customer data during checkout?"}),"\n",(0,c.jsxs)(o.p,{children:["If you want to modify order or customer data submitted during checkout you can use the ",(0,c.jsx)(o.code,{children:"woocommerce_store_api_checkout_order_processed"})," action."]}),"\n",(0,c.jsxs)(o.p,{children:["This action fires just before payment is processed. At this point you can modify the order as you would at any other point in the WooCommerce lifecycle, you still have to call ",(0,c.jsx)(o.code,{children:"$order->save()"})," to persist the changes."]}),"\n",(0,c.jsx)(o.p,{children:"As an example, let's make sure the user's first and last names are capitalized:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-php",children:"add_action(\n  'woocommerce_store_api_checkout_order_processed',\n  function( WC_Order $order ) {\n    $order->set_shipping_first_name( ucfirst( $order->get_shipping_first_name() ) );\n    $order->set_shipping_last_name( ucfirst( $order->get_shipping_last_name() ) );\n\n    $order->set_billing_first_name( ucfirst( $order->get_billing_first_name() ) );\n    $order->set_billing_last_name( ucfirst( $order->get_billing_last_name() ) );\n\n    $order->save();\n  }\n);\n"})}),"\n",(0,c.jsx)(o.h3,{id:"how-do-i-render-something-in-the-checkout-block",children:"How do I render something in the Checkout block?"}),"\n",(0,c.jsx)(o.p,{children:"This depends on what you want to render."}),"\n",(0,c.jsx)(o.h4,{id:"rendering-a-field",children:"Rendering a field"}),"\n",(0,c.jsxs)(o.p,{children:["The recommended approach to rendering fields in the Checkout block is to use the ",(0,c.jsx)(o.a,{href:"https://developer.woocommerce.com/docs/cart-and-checkout-additional-checkout-fields/",children:"Additional Checkout Fields API"}),"."]}),"\n",(0,c.jsx)(o.h4,{id:"rendering-a-custom-block",children:"Rendering a custom block"}),"\n",(0,c.jsxs)(o.p,{children:["To render a custom block in the Checkout block, the recommended approach is to create a child block of one of the existing Checkout inner blocks. We have an example template that can be used to set up and study an inner block. To install and use it, follow the instructions in ",(0,c.jsx)(o.a,{href:"https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/extend-cart-checkout-block/README.md",children:(0,c.jsx)(o.code,{children:"@woocommerce/extend-cart-checkout-block"})}),". Please note that this example contains multiple other examples of extensibility, not just inner blocks."]})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,c.jsx)(o,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>i});var n=t(6540);const c={},s=n.createContext(c);function r(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);